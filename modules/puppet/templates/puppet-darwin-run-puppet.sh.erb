#!/bin/bash
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

PUPPET_ENV='production'
PUPPET_REPO="${PUPPET_REPO:-<%= @puppet_repo -%>}"
PUPPET_BRANCH="${PUPPET_BRANCH:-<%= @puppet_branch -%>}"
WORKING_DIR="/etc/puppet/environments/${PUPPET_ENV}/code"
R10K_DIR="/etc/puppet/environments/${PUPPET_ENV}/r10k_modules"
ROLE_FILE='/etc/puppet_role'
PUPPET_BIN='/opt/puppetlabs/bin/puppet'
FACTER_BIN='/opt/puppetlabs/bin/facter'
R10K_BIN='/opt/puppetlabs/bin/r10k'
FQDN=$(${FACTER_BIN} networking.fqdn)

export LANG=en_US.UTF-8

function fail {
    # TODO: report failure to ext service
    echo "${@}"
    exit 1
}

mkdir -p "${WORKING_DIR}" || fail
mkdir -p "${R10K_DIR}" || fail
cd "${WORKING_DIR}" || fail

# Make dir world writable for puppet homebrew bug workaround
chmod 777 .

# Set role or fail if file not found
if [ -f "${ROLE_FILE}" ]; then
    ROLE=$(<${ROLE_FILE})
else
    fail "Failed to find puppet role file ${ROLE_FILE}"
fi

[ -f '/var/root/vault.yaml' ] || fail "Secrets file not found"

function update_puppet {

    # Initialize working dir if dir is empty
    if [ ! "$(find "$WORKING_DIR" -mindepth 1 -print -quit 2>/dev/null)" ]; then
        git init || return 1
        git remote add origin "${PUPPET_REPO}" || return 1
    fi

    # Fetch and checkout production branch
    git fetch --all --prune || return 1
    git checkout --force "origin/${PUPPET_BRANCH}" || return 1

    # Purge modules no longer managed by Puppetfile
    R10K_PURGE_OPTIONS=("--moduledir=${R10K_DIR}" '-v')
    $R10K_BIN puppetfile purge "${R10K_PURGE_OPTIONS[@]}"

    # Install r10k modules
    R10K_INSTALL_OPTIONS=("--moduledir=${R10K_DIR}" '--force' '-v')
    $R10K_BIN puppetfile install "${R10K_INSTALL_OPTIONS[@]}"

    # Copy secrets
    mkdir -p "${WORKING_DIR}/data/secrets"
    cp /var/root/vault.yaml "${WORKING_DIR}/data/secrets/vault.yaml"
    chmod 0600 "${WORKING_DIR}/data/secrets/vault.yaml"

    cat <<EOF > "${WORKING_DIR}/manifests/nodes/nodes.pp"
node '${FQDN}' {
    include ::roles_profiles::roles::${ROLE}
}
EOF

    return 0
}

function run_puppet {

    # Always bring the puppet git and r10k modules up-to-sync before executing puppet
    if ! update_puppet; then
        echo "Failed to update puppet"
        return 1
    fi

    TMP_LOG=$(mktemp /tmp/puppet-output.XXXXXX)
    [ -f "${TMP_LOG}" ] || fail "Failed to mktemp puppet log file"

    PUPPET_OPTIONS=("--modulepath=${WORKING_DIR}/modules:${R10K_DIR}" '--hiera_config=./hiera.yaml' '--logdest=console' '--color=false' '--detailed-exitcodes' './manifests/')
    $PUPPET_BIN apply "${PUPPET_OPTIONS[@]}" 2>&1 | tee "${TMP_LOG}"
    retval=$?
    # just in case, if there were any errors logged, flag it as an error run
    if grep -q "^Error:" "${TMP_LOG}"
    then
        retval=1
    fi

    rm "${TMP_LOG}"
    case $retval in
        0|2) return 0;;
        *) return 1;;
    esac
}

# Call the run_puppet function in a endless loop
while ! run_puppet; do
    echo "Puppet run failed; re-trying after 10m"
    sleep 600
done

exit 0
