<%
# Use `sun_ssh` variable for quick Solaris checks.
sun_ssh = scope['::operatingsystem'] == 'Solaris'

# If given an array for an argument, this returns a joined string.
# Useful for options that can take arrays or strings.
def option_str(arg, join=' ')
  if arg.is_a?(Array)
    arg.join(join)
  else
    arg
  end
end
-%>
# General configuration.
<% if scope['sys::ssh::port'].is_a? Array -%>
<%   scope['sys::ssh::port'].each do |ssh_port| -%>
Port <%= ssh_port %>
<%   end -%>
<% else -%>
Port <%= scope['sys::ssh::port'] %>
<% end -%>
<% if scope['sys::ssh::listen_address'].is_a? Array -%>
<%   scope['sys::ssh::listen_address'].each do |ssh_listen_address| -%>
ListenAddress <%= ssh_listen_address %>
<%   end -%>
<% elsif scope['sys::ssh::listen_address'].is_a? String -%>
ListenAddress <%= scope['sys::ssh::listen_address'] %>
<% end -%>
<%# The SSH protocols allowed by the daemon, and determining if version 1 is allowed. -%>
<% if scope['sys::ssh::protocol'].is_a? Array -%>
Protocol <%= scope['sys::ssh::protocol'].join(',') %>
<% ssh1 = scope['sys::ssh::protocol'].include?('1') or scope['sys::ssh:protocol'].include?(1) -%>
<% else -%>
Protocol <%= scope['sys::ssh::protocol'] %>
<% ssh1 = Integer(scope['sys::ssh::protocol']) == 1 -%>
<% end -%>
<% if scope['sys::ssh::ciphers'].count > 0 -%>
Ciphers <%= option_str(scope['sys::ssh::ciphers'], ',') %>
<% end -%>
<% if scope['sys::ssh::kex_algorithms'].count > 0 -%>
KexAlgorithms <%= option_str(scope['sys::ssh::kex_algorithms'], ',') %>
<% end -%>
<% if scope['sys::ssh::macs'].count > 0 -%>
MACs <%= option_str(scope['sys::ssh::macs'], ',') %>
<% end -%>

# Key locations.
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_dsa_key
<% if @ecdsa -%>
HostKey /etc/ssh/ssh_host_ecdsa_key
<% end -%>
<% if @ed25519 -%>
HostKey /etc/ssh/ssh_host_ed25519_key
<% end -%>
<% if scope['sys::ssh::host_key_algorithms'].count > 0 -%>
HostKeyAlgorithms <%= option_str(scope['sys::ssh::host_key_algorithms'], ',') %>
<% end -%>
<% if scope['sys::ssh::host_certificate'] -%>
HostCertificate <%= scope['sys::ssh::host_certificate'] %>
<% end -%>

<% if scope['sys::ssh::authorized_keys_file'] -%>
AuthorizedKeysFile <%= option_str(scope['sys::ssh::authorized_keys_file']) %>
<% end -%>
<% if scope['sys::ssh::authorized_keys_command'] -%>
AuthorizedKeysCommand <%= scope['sys::ssh::authorized_keys_command'] %>
<%   if scope['sys::ssh::authorized_keys_command_user'] -%>
AuthorizedKeysCommandUser <%= scope['sys::ssh::authorized_keys_command_user'] %>
<%   end -%>
<% end -%>
<% if scope['sys::ssh::trusted_user_ca_keys'] -%>
TrustedUserCAKeys <%= scope['sys::ssh::trusted_user_ca_keys'] %>
<% end -%>

# Privilege Separation setttings; enhances security if turned on.
UsePrivilegeSeparation <%= @privilege_separation %>

<%# If the `$denyusers` or `$allowusers` are defined, then set them up here. -%>
<% if scope['sys::ssh::denyusers'] -%>
# Deny the following users SSH access
DenyUsers <%= option_str(scope['sys::ssh::denyusers']) %>
<% end -%>
<% if scope['sys::ssh::allowusers'] -%>
# Only allow the following users SSH access
AllowUsers <%= option_str(scope['sys::ssh::allowusers']) %>
<% end -%>
<%# If the `$denygroups` or `$allowgroups` are defined, then set them up here. -%>
<% if scope['sys::ssh::denygroups'] -%>
# Deny the following groups SSH access
DenyGroups <%= option_str(scope['sys::ssh::denygroups']) %>
<% end -%>
<% if scope['sys::ssh::allowgroups'] -%>
# Only allow the following groups SSH access
AllowGroups <%= option_str(scope['sys::ssh::allowgroups']) %>
<% end -%>

# Logging
SyslogFacility <%= scope['sys::ssh::syslog_facility'] %>
LogLevel <%= scope['sys::ssh::log_level'] %>

# Authentication settings.
LoginGraceTime <%= scope['sys::ssh::login_grace_time'] %>
PermitRootLogin <% if scope['sys::ssh::root_login'] %>yes<% else %>no<% end %>
StrictModes <% if scope['sys::ssh::strict_modes'] %>yes<% else %>no<% end %>
<% if ssh1 -%>
RSAAuthentication <% if scope['sys::ssh::rsa_auth'] %>yes<% else %>no<% end %>
<% end -%>
PubkeyAuthentication <% if scope['sys::ssh::pubkey_auth'] %>yes<% else %>no<% end %>

# Rhosts configuration.
IgnoreRhosts yes
<% if ssh1 -%>
RhostsRSAAuthentication no
<% end -%>
HostbasedAuthentication no

UseDNS <% if scope['sys::ssh::use_dns'] %>yes<% else %>no<% end %>

# If passwords aren't allowed, must use key-based authentication.
PermitEmptyPasswords <% if scope['sys::ssh::empty_passwords'] %>yes<% else %>no<% end %>
ChallengeResponseAuthentication <% if scope['sys::ssh::challenge_response'] %>yes<% else %>no<% end %>
PasswordAuthentication <% if scope['sys::ssh::password_auth'] %>yes<% else %>no<% end %>
<% if sun_ssh -%>
KbdInteractiveAuthentication <% if scope['sys::ssh::password_auth'] %>yes<% else %>no<% end %>
<% end -%>
<% if @use_pam -%>
UsePAM yes
<% end -%>

# Forwarding settings
AllowTcpForwarding <% if scope['sys::ssh::tcp_forwarding'] %>yes<% else %>no<% end %>
X11Forwarding <% if scope['sys::ssh::x11_forwarding'] %>yes<% else %>no<% end %>
<% if not sun_ssh -%>
AllowAgentForwarding <% if scope['sys::ssh::agent_forwarding'] %>yes<% else %>no<% end %>
<% end -%>

PrintMotd <% if @use_pam or sun_ssh %>no<% else %>yes<% end %>
PrintLastLog yes
<% if not sun_ssh then %>
TCPKeepAlive <% if scope['sys::ssh::tcp_keepalive'] %>yes<% else %>no<% end %>

# Accepted environment variables from the client.
AcceptEnv <%= scope['sys::ssh::acceptenv'].join(' ') %>
<% else -%>
<%# KeepAlive (not TCPKeepalive) is the setting on Sun SSH -%>
KeepAlive <% if scope['sys::ssh::tcp_keepalive'] %>yes<% else %>no<% end %>
<% end -%>
<% if scope['sys::ssh::sftp'] -%>

Subsystem sftp <%= @sftp_subsystem %>
<% end -%>
