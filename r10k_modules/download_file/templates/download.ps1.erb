<% if @security_protocol -%>
[Net.ServicePointManager]::Expect100Continue = 'true';
[Net.ServicePointManager]::SecurityProtocol = '<%= @security_protocol %>';
<% end -%>
$webclient = New-Object System.Net.WebClient
$user = '<%= @user %>'
$password = '<%= @password %>'
$proxyAddress = '<%= @proxy_address %>'
$proxyUser = '<%= @proxy_user %>'
$proxyPassword = '<%= @proxy_password %>'
<% if @user_agent %>
$webclient.Headers['User-Agent'] = '<%= @user_agent %>'
<% end %>
# This is potentially not secure if not using ssl
if (($user -ne '') -and ($password -ne '')) {
  # Basic authentication encoding.
  $basic = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($user + ":" + $password));
  # Set Authorization HTTP header with Basic authentication information.
  $webclient.Headers["Authorization"] = "Basic $basic"
}

if ($proxyAddress -ne '') {
  if (!($proxyAddress.StartsWith('http://') -or $proxyAddress.StartsWith('https://'))) {
    $proxyAddress = 'http://' + $proxyAddress
  }

  $proxy = new-object System.Net.WebProxy
  $proxy.Address = $proxyAddress
  if (($proxyPassword -ne '') -and ($proxyUser -ne '')) {
  
    <% if @is_password_secure %>
    $password = ConvertTo-SecureString -string $proxyPassword
    <% else %>
    $password = ConvertTo-SecureString "$proxyPassword" -AsPlainText -Force
    <% end %>
    
    $proxy.Credentials = New-Object System.Management.Automation.PSCredential($proxyUser, $password)
    $webclient.UseDefaultCredentials = $true
  }
  $webclient.proxy = $proxy
}
<% if @cookies %>
<%= '$webclient.Headers.Add([System.Net.HttpRequestHeader]::Cookie, "' + @cookie_string + '")' %>
<% end %>
try {
  $webclient.DownloadFile('<%= @url %>', '<%= @destination_directory %>\<%= @filename %>')
}
catch [Exception] {
  write-host $_.Exception.GetType().FullName
  write-host $_.Exception.Message
  write-host $_.Exception.InnerException.Message
  throw $_.Exception
}
